package com.juice.alg.part1.chapter3;

public class Chapter3 {
    /**
     *算法时间复杂度的计算:
     *   1. 插入排序的运行时间为 T(n) = C1*n^2 + C2*n + C3, 此为其精确运行时间
     *   2. 对于足够大的 n，精确运行时间中的"倍增常量"和"低阶项"被输入规模本身的影响所支配，写成 Θ(n^2)，此即为算法的渐近效率
     *      Θ(n^2) 是一个集合，描述了所有介于 D1*g(n)，D2*g(n) 之间的函数
     *
     *渐近记号:
     *  1. T(n) = Θ(g(n))
     *     Θ(g(n)) 是一个集合: {存在常数 D1, D2, 和 N, 使得 n >= N 时， D1*g(n)  <=  f(n)  <=  D2*g(n)}
     *     从函数图像上看，T(n) 夹入 D1*g(n) 与 D2*g(n) 之间
     *
     *     T(n) = Θ(g(n))  等同于  T(n) ∈ Θ(g(n))
     *     此记号表明: D1*g(n) 是 T(n) 的渐近下界(而且是渐近下确界)，D2*g(n) 是 T(n) 的渐近上界(而且是渐近上确界)
     *
     *  2. T(n) = O(g(n))
     *     存在常数 D2, 和 N, 使得 n >= N 时， T(n)  <=  D2*g(n)
     *     从函数图像上看，T(n) 在  D2*g(n) 下面
     *
     *     此记号表明: D2*g(n) 是 T(n) 的渐近上界
     *
     *     1). T(n) = o(g(n)):  T(n)  <=  D2*g(n)  and  lim g(n)/T(n) = ∞
     *         o 描述了 D2*g(n) 是 T(n) 的渐近上界，而且不是紧确的
     *
     *  3. T(n) = Ω(g(n))
     *     存在常数 D1, 和 N, 使得 n >= N 时， D1*g(n)  <=  T(n)
     *     从函数图像上看，T(n) 在 D1*g(n) 上面
     *
     *     此记号表明: D1*g(n) 是 T(n) 的渐近下界
     *
     *     1). T(n) = w(g(n)):  D1*g(n)  <=  T(n)  and  lim T(n)/g(n) = ∞
     *         w 描述了 D1*g(n) 是 T(n) 的渐近下界，而且不是紧确的
     *
     */

    public static void main(String[] argv) {

    }




}
