package com.project.alg.chapter1_4;

public class Chapter1_4_2 {

    /**
     *递归树
     *T(n) = m*T(n/k) + f(n), f(n)为本次分解+合并的消耗
     * m决定树的茂盛，m越小，merge次数越少
     * k决定树的高度，k越大，树越矮，每次merge的规模越小
     *
     *如T(n) = 3*T(n/4) + n^2
     *                                      [n]
     *            [n/4]                    [n/4]                   [n/4]            第一次分解，n/4      1次merge, 1*n^2                           , 3份
     *    [n/16]  [n/16]  [n/16]   [n/16]  [n/16] [n/16]   [n/16]  [n/16] [n/16]    第二次分解，n/4^2    3次merge, 3*(n/4)^2                       , 3^2份
     *    ...
     *    ...                               [1]                             ...     第x次分解，n/4^x    3^(x-1)次merge, 3^(x-1) * [n/4^(x-1)]^2   , 3^x份
     *
     * 1.n/4^x = 1 ==> 4^x = n ==> x=log4(n), 树的高度=x=log4(n)
     * 2.分解+合并的消耗之和
     *   = 1*n^2 + 3*(n/4)^2 + 3^2 * [n/4^(2)]^2 +...+ 3^(x-1) * [n/4^(x-1)]^2
     *   = n^2 * [1 + 3/16 + (3/16)^2 + (3/16)^3 +...+ (3/16)^(x-1)]
     *   = C*n^2*(1-3/16^x)
     *   = C*(n^2 - 3^(log4(n)))
     * 3.解决的消耗之和
     *     第x层数量3^x <= n，其中3^x = 3^[log4(n)] = n^[log4(3)]
     *   = T(1) * n^[log4(3)]
     *
     *影响速度的因素: m,k,f(n)
     */






}
